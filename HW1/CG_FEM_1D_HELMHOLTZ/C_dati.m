%=======================================================================================================
% This contain all the information for running main
% TEMPLATE OF THE STRUCT DATI
%=======================================================================================================
%
%  DATI= struct( 'name',              % set the name of the test 
%                'domain',            % set the domain [x1,x2]
%                'c2'                 % c^2 wave speed
%                'bc'                 % boundary conditions
%                'omega'              % angular frequency 
%                'rho',               % mass density
%                'vel',               % wave velocity
%                'exact_sol',         % set the exact solution
%                'grad_exact',        % set the first space derivative of the exact solution
%                'force',             % set the forcing term
%                'neumann1',          % Neumann condition x=0
%                'neumann2',          % Neumann condition x=L
%                'fem',               % set finite element space
%                'nqn_1D',            % number of quadrature nodes for integrals over lines
%                'MeshType',          % regular mesh
%                'refinement_vector', % set the level of refinement for the grid
%                'visual_graph',      % if you want to display the graphical results ['Y','N']
%                'plot_errors'        % you want to print the computed errors ['Y','N']
% 
%========================================================================================================

function [Dati]=C_dati(test)

if strcmp(test,'Test1') == 1    
Dati = struct( 'name',             test,...
               ... % Test name
               'domain',           [0,1],...                          
               ... % Domain bounds       
               'bc',           'DD',...                          
               ... % boundary conditions                      
               'omega',           500*2*pi, ...
               ... % angular frequency
               'rho',             1.225, ...
               ... % density
               'vel',             340,...
               ... % velocity
               'exact_sol',       '1.e-3*rho*vel*omega*(sin(omega*x/vel)+ 1/tan(omega*1/vel)*cos(omega*x/vel))',...      
               ... % Definition of exact solution
               'grad_exact',     '1.e-3*rho*vel*omega*(omega/vel*cos(omega*x/vel) - 1/tan(omega*1/vel)*omega/vel*sin(omega*x/vel))',...   
               ... % du/dx 
               'force',           '0*x',...  
               ... % Forcing term
               'neumann1',     '1.e-3*omega^2*rho',...   
               ... % c2du/dx(0,t) 
               'neumann2',     '0',...   
               ... % c2du/dx(L,t) 
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            2,...           
               ... % Number of quad. points per element
               'MeshType',         'TS', ...        
               ... % uniform regular mesh
               'refinement_vector', [4,5,6,7],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'Y',...
               ... % Visualization of the solution
               'plot_errors',       'Y', ...
               ... % Compute Errors 
               'plot_eigvct',      'Y' ...
               ...% Compute Errors 
               );           
           
           
elseif strcmp(test,'Test2') == 1    
Dati = struct( 'name',             test,...
               ... % Test name
               'domain',           [0,3],...                          
               ... % Domain bounds       
               'bc',           'DD',...                          
               ... % boundary conditions                      
               'omega',           2*pi, ...
               ... % angular frequency
               'rho',             1, ...
               ... % density
               'vel',             1,...
               ... % velocity
               'exact_sol',       'sin(x*2*pi/3)*1/(omega^2-(2*pi/3)^2)',...      
               ... % Definition of exact solution
               'grad_exact',     '2*pi/3*cos(x*2*pi/3)*1/(omega^2-(2*pi/3)^2)',...   
               ... % du/dx 
               'force',           'sin(x*2*pi/3)',...  
               ... % Forcing term
               'neumann1',     '2*pi/3*1/(omega^2-(2*pi/3)^2)',...   
               ... % c2du/dx(0,t) 
               'neumann2',     '2*pi/3*1/(omega^2-(2*pi/3)^2)',...   
               ... % c2du/dx(L,t) 
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            2,...           
               ... % Number of quad. points per element
               'MeshType',         'TS', ...        
               ... % uniform regular mesh
               'refinement_vector', [4,5,6,7],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'Y',...
               ... % Visualization of the solution
               'plot_errors',       'Y', ...
               ... % Compute Errors 
               'plot_eigvct',      'Y' ...
               ...% Compute Errors 
               );         
elseif strcmp(test,'Test3') == 1    
Dati = struct( 'name',             test,...
               ... % Test name
               'domain',           [0,1],...                          
               ... % Domain bounds       
               'bc',           'NN',...                          
               ... % boundary conditions                      
               'omega',           [0.1*2*pi,5000*2*pi], ...
               ... % angular frequency
               'rho',             1.225, ...
               ... % density
               'vel',             340,...
               ... % velocity
               'exact_sol',       '1.e-3*rho*vel*omega*(sin(omega*x/vel)+ 1/tan(omega*1/vel)*cos(omega*x/vel))',...      
               ... % Definition of exact solution
               'grad_exact',     '1.e-3*rho*vel*omega*(omega/vel*cos(omega*x/vel) - 1/tan(omega*1/vel)*omega/vel*sin(omega*x/vel))',...   
               ... % du/dx 
               'force',           '0*x',...  
               ... % Forcing term
               'neumann1',     '1.e-3*omega^2*rho',...   
               ... % c2du/dx(0,t) 
               'neumann2',     '0',...   
               ... % c2du/dx(L,t) 
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            2,...           
               ... % Number of quad. points per element
               'MeshType',         'TS', ...        
               ... % uniform regular mesh
               'refinement_vector', [4,5,6,7],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'Y',...
               ... % Visualization of the solution
               'plot_errors',       'Y', ...
               ... % Compute Errors 
               'plot_eigvct',      'N' ...
               ...% Compute Errors 
               );  
elseif strcmp(test,'TestHW1S0') == 1    
Dati = struct( 'name',             test,...
               ... % Test name
               'domain',           [0,1],...                          
               ... % Domain bounds       
               'bc',           'DD',...                          
               ... % boundary conditions                      
               'omega',           2*pi, ...
               ... % angular frequency
               'rho',             1, ...
               ... % density
               'vel',             1,...
               ... % velocity
               'exact_sol',       'sin(x*2*pi/3)*1/(omega^2-(2*pi/3)^2)',...      
               ... % Definition of exact solution
               'grad_exact',     '2*pi/3*cos(x*2*pi/3)*1/(omega^2-(2*pi/3)^2)',...   
               ... % du/dx 
               'force',           'sin(x*2*pi/3)',...  
               ... % Forcing term
               'neumann1',     '2*pi/3*1/(omega^2-(2*pi/3)^2)',...   
               ... % c2du/dx(0,t) 
               'neumann2',     '2*pi/3*1/(omega^2-(2*pi/3)^2)',...   
               ... % c2du/dx(L,t) 
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            2,...           
               ... % Number of quad. points per element
               'MeshType',         'TS', ...        
               ... % uniform regular mesh
               'refinement_vector', [4,5,6,7],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'Y',...
               ... % Visualization of the solution
               'plot_errors',       'Y', ...
               ... % Compute Errors 
               'plot_eigvct',      'Y' ...
               ...% Compute Errors 
               );
end



